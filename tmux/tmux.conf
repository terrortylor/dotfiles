# {{{ Theme
# only this line might not be enough
PANE_BORDER_BG="#282828"
PANE_BORDER_FG="#63C6BF"
ACTIVE_PANE_BORDER_BG="#282828"
ACTIVE_PANE_BORDER_FG="#63C6BF"

STATUS_WINDOW_JUSTIFY="centre"
STATUS_BACKGROUND="#282828"
STATUS_SESSION="#B3DEEF"
STATUS_TEXT="#95DAEF"

STATUS_WINDOW_ACTIVE_BG="#95DAEF"
STATUS_WINDOW_ACTIVE_FG="#282828"
STATUS_WINDOW_ACTIVITY_BG="#B3DEEF"
STATUS_WINDOW_ACTIVITY_FG="#F23643"
STATUS_WINDOW_MESSAGE_BG="#95DAEF"
STATUS_WINDOW_MESSAGE_FG="#282828"

# Instruct to use terminal colurs
set -g default-terminal "xterm-256color"
# Needs this line also to overrides the default color
set-option -ga terminal-overrides ",xterm-256color:Tc"

# Pane Border
# Using hook bellow negates need for this...
# set -g pane-border-style bg=$PANE_BORDER_BG,fg=$PANE_BORDER_FG
set -g pane-active-border-style bg=$ACTIVE_PANE_BORDER_BG,fg=$ACTIVE_PANE_BORDER_FG
# Setting pane border title to blank gives an extra edge to active border,
# then the hook bellow enables pane-borders if there is more than one pane
# other wise turns them off, giving full screen to single pane and at least
# two highlighted edges if more than one pane... I'd like a bot just around
# active pane but this isn't supported. Giving different backgrounds doesn't
# work if one pane is vim as I use the same background colour as active terminal.
set -g pane-border-format ""
is_many="if [ #{window_panes} -eq 1 ]; then exit 1; fi"
set-hook -g window-layout-changed 'if-shell $is_many "set-option -w pane-border-status top" "set -w pane-border-status off"'

# Status Bar
# Center the window names/tabs
set -g status-justify $STATUS_WINDOW_JUSTIFY

# Left side of status bar
set -g status-left-style bg=$STATUS_BACKGROUND,fg=$STATUS_SESSION
set -g status-left-length 20
set -g status-left "#S #[fg=$STATUS_TEXT]#W"

# Window status format
set -g window-status-format " #I:#W#F "
set -g window-status-current-format " #I:#W#F "
# Window status unselected
set -g status-style bg=$STATUS_BACKGROUND,fg=$STATUS_TEXT
# Window status selected
set -g window-status-current-style bg=$STATUS_WINDOW_ACTIVE_BG,fg=$STATUS_WINDOW_ACTIVE_FG
# Window with activity
set -g window-status-activity-style bg=$STATUS_WINDOW_ACTIVITY_BG,fg=$STATUS_WINDOW_ACTIVITY_FG

# Right side of status bar
set -g status-right-style bg=$STATUS_BACKGROUND,fg=$STATUS_SESSION
set -g status-right-length 60
set-option -g status-right "#(date '+%H:%M:%S   %d (%a) %B')"

# Status Message
set -g message-style bg=$STATUS_WINDOW_MESSAGE_BG,fg=$STATUS_WINDOW_MESSAGE_FG
set -g message-command-style bg=$STATUS_WINDOW_MESSAGE_BG,fg=$STATUS_WINDOW_MESSAGE_FG
# }}} Theme
# {{{ Window and Pane Settings
# 0 is too far from ` ;) so set numbers to start from 1
# Windows
set -g base-index 1

# Renumber to avoid gaps in window numbering when closing windows
set-option -g renumber-windows on
# Panes
setw -g pane-base-index 1

# Open new pane/window in current dir
# bind c new-window -c "#{pane_current_path}"\; send-keys "tmux_set_window_name 0" ENTER
bind c new-window  -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind = split-window -v -c "#{pane_current_path}"
bind c-j split-window -v -c "#{pane_current_path}"
bind c-k split-window -h -c "#{pane_current_path}"
# Automatically set window title
# set-window-option -g automatic-rename on
# set-option -g set-titles on
# }}} Window and Pane Settings
# {{{ General Settings
# Small delay in presing the escape key in nvim when using escape
set -s escape-time 0
# show messagese for longer
set-option -g display-time 2000
# }}} General Settings
# {{{ Navigation
# vim-tmux-navigation default bindings
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
# bind-key -T copy-mode-vi C-\ select-pane -l

# But when I pair it's useful to have mouse functionality
# set -g mouse on
# }}} Navigation
# {{{ Vim mode config
# I like vim binings, so set copy-mode to use vi bindings
set-window-option -g mode-keys vi
# Although this doesn't select with v and yank with y, so...
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'V' send -X select-line
# Don't forget to emulate block select
bind-key -T copy-mode-vi 'C-v' send -X begin-selection \; send -X rectangle-toggle
# Some times it's nice to yank without escaping
bind-key -T copy-mode-vi 'Y' send-keys -X copy-pipe "xclip -i -f -selection primary | xclip -i -selection clipboard"
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
# Also I want esc to cancel as well as q
bind-key -T copy-mode-vi 'Escape' send -X cancel
# Configure incremental search out the box
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
# Paste selection
# NOTE This overrides default [p]revious window mapping
unbind-key p
bind-key p paste-buffer
# Enter copy mode / or like normal vim mode... not sold on this mapping yet
bind-key v copy-mode
# }}} Vim mode config
# {{{ Custom Mappings
# Change tmux prefix to be in line with vim leader
set-option -g prefix C-Space

# Reload tmux config
bind-key r source-file ~/.tmux.conf \; display-message "tmux config reloaded"
bind C-Space new-window -n "Fuzzy find window by name:" "tmux-window-fzf"

# Toggle mouse mode
bind-key -n F3 set mouse \; display-message "Mouse mode: #{?mouse, ON, OFF}"

# Cycle through windows
# TODO https://github.com/neovim/neovim/issues/14298
unbind-key -n m-]
# bind-key -n m-] next-window
# bind-key -n m-[gprevious-window

# Swap pane with current pane
bind-key s display-panes\; command-prompt -p "pane #: " "swap-pane -t '%%'"

bind j choose-window -Z
# TODO when tmux 3.2 installed move to popup
bind k new-window -n "SMUG" "start-tmux-workspace"
bind f new-window\; send-keys "ffcd" ENTER

# setup home and end keys in vim
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"
# }}} Custom Mappings
# {{{ Plugins
set -g @plugin 'laktak/extrakto'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# Currently this is manually cloned
# See: https://github.com/tmux-plugins/tpm
run '~/.tmux/plugins/tpm/tpm'
# }}} Plugins
